name: Infraestructura como codigo
on:
  workflow_dispatch:
  push:
    paths:
      # - '.github/workflows/infraestructure.yaml'
      - 'infraestructure/**'

jobs:
  Deploy_Infraestructure:
    name: Despliegue de infraestructura
    runs-on: ubuntu-latest
    permissions: write-all
    steps:

      - name: Archivos de repositorio 
        uses: actions/checkout@v4

      - name: Configuracion de Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          cli_config_credentials_token: ${{secrets.TERRAFORM_TOKEN}}

      - name: Iniciar proyecto de Terraform
        run: terraform init
        working-directory: ./infraestructure

      - name: Validacion de archivos terraform
        run: terraform validate
        working-directory: ./infraestructure
      
      - name: Plan de Terraform
        run: terraform plan -var-file terraform.tfvars
        working-directory: ./infraestructure
      
      - name: Aplicar configuracion de terraform
        run: terraform apply -var-file terraform.tfvars -auto-approve
        working-directory: ./infraestructure
      
      - name: Obtener y guardar archivo de configuracion de K8S en GitHub
        run: |
          echo "${{secrets.GH_TOKEN}}" | gh auth login --with-token
          gh secret set K8S_KUBECONFIG --body "$(terraform output -raw kubeconfig | base64)" --repo duditas-xd/dash-iot-manifest
          gh secret set K8S_KUBECONFIG --body "$(terraform output -raw kubeconfig | base64)" --repo duditas-xd/dash-iot
        working-directory: ./infraestructure


###################################################################################################
  
  Envairoment_init_infraestructure:
    name: Variables iniciales
    needs: Deploy_Infraestructure
    runs-on: ubuntu-latest
    permissions: write-all
    steps:

      - name: Archivos de repositorio 
        uses: actions/checkout@v4

      - name: Trigger workflow de Variables de Entorno
        uses: peter-evans/repository-dispatch@v3
        with:
          token: ${{ secrets.GH_TOKEN }}
          repository: ${{ github.repository }}
          event-type: trigger-update-variables

      - name: Esperar finalización de Variables de entorno K8S
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
            echo "Buscando el último workflow Variables de entorno K8S..."
            sleep 10

            workflow_id=$(gh run list --workflow envairoment.yaml --json databaseId -q '.[0].databaseId')
            if [ -z "$workflow_id" ]; then
              echo "No se encontró ningún workflow reciente. Verifica el disparo del evento."
              exit 1
            fi

            echo "Workflow detectado con ID: $workflow_id"
            echo "Esperando que el workflow Variables de entorno K8S finalice..."

            while true; do
              status=$(gh run view $workflow_id --json status -q '.status')
              if [ "$status" == "completed" ]; then
                conclusion=$(gh run view $workflow_id --json conclusion -q '.conclusion')
                if [ "$conclusion" != "success" ]; then
                  echo "El workflow falló con conclusión: $conclusion"
                  exit 1
                fi
                echo "El workflow Variables de entorno K8S se completó exitosamente."
                break
              fi
              echo "El workflow todavía está en ejecución. Esperando 15 segundos..."
              sleep 15
            done

      - name: -------- MENSAJE ---------
        run: echo "El workflow de trigger-update-variables ha terminado con éxito. Continuando..."


##############################################################################################################

  Deployment_init_APPS:
    name: Despliegue inicial
    runs-on: ubuntu-latest
    needs: Envairoment_init_infraestructure
    permissions: write-all
    steps:

      - name: Archivos de repositorio 
        uses: actions/checkout@v4

      - name: Trigger workflow de Despliegue con ArgoCD
        uses: peter-evans/repository-dispatch@v3
        with:
          token: ${{ secrets.GH_TOKEN }}
          repository: ${{ github.repository }}
          event-type: trigger-init-deploy

      - name: Esperar finalización del workflow trigger-init-deploy
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Buscando el último workflow disparado por trigger-init-deploy..."
          sleep 10

          workflow_id=$(gh run list --workflow deployment.yaml --json databaseId -q '.[0].databaseId')
          if [ -z "$workflow_id" ]; then
            echo "No se encontró ningún workflow reciente. Verifica el disparo del evento."
            exit 1
          fi

          echo "Workflow detectado con ID: $workflow_id"
          echo "Esperando que el workflow trigger-init-deploy finalice..."

          while true; do
            status=$(gh run view $workflow_id --json status -q '.status')
            if [ "$status" == "completed" ]; then
              conclusion=$(gh run view $workflow_id --json conclusion -q '.conclusion')
              if [ "$conclusion" != "success" ]; then
                echo "El workflow falló con conclusión: $conclusion"
                exit 1
              fi
              echo "El workflow trigger-init-deploy se completó exitosamente."
              break
            fi
            echo "El workflow todavía está en ejecución. Esperando 15 segundos..."
            sleep 15
          done

      - name: -------- MENSAJE ---------
        run: echo "El workflow de trigger-init-deploy ha terminado con éxito."
