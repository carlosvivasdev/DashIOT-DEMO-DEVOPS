name: Despliegue con ArgoCD
on:
  repository_dispatch:
    types: [trigger-init-deploy]

  push:
    paths: 
      - '.github/workflows/deployment.yaml'

jobs:
  K8S_Preparation:
    name: Preparacion de K8S
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GH_TOKEN  }}
    steps:

    - name: Archivos de repositorio 
      uses: actions/checkout@v4

    - name: Conexión a kubernetes
      run: |
        mkdir -p ~/.kube
        echo "${{ secrets.K8S_KUBECONFIG }}" | base64 --decode > ~/.kube/config

    - name: Instalacion de Helm
      uses: azure/setup-helm@v3
      with:
        version: 'latest'
    
    - name: Instalar NGINX Ingress Controller 
      run: |
        STATUS=$(helm list -n ingress-nginx --filter '^ingress-nginx$' -o json | jq -r '.[0].status // empty')
        if [ -z "$STATUS" ] || [ "$STATUS" == "failed" ]; then
          echo "Instalando/Reinstalando NGINX Ingress Controller..."
          helm uninstall ingress-nginx -n ingress-nginx || true
          helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
          helm repo update
          helm upgrade --install ingress-nginx ingress-nginx \
            --repo https://kubernetes.github.io/ingress-nginx \
            --namespace ingress-nginx --create-namespace \
            --set controller.extraArgs.tcp-services-configmap=ingress-nginx/tcp-services
          kubectl apply -f ./nginx/tcp-services.yaml -n ingress-nginx
        else
          echo "NGINX Ingress Controller ya está instalado y funcionando, omitiendo..."
        fi

    - name: Asignando ip a Load Balancer
      run: |    
        echo "Esperando a que el Load Balancer de DigitalOcean tenga una IP asignada..."
        while [[ -z "$(kubectl get svc ingress-nginx-controller -n ingress-nginx -o jsonpath='{.status.loadBalancer.ingress[0].ip}')" ]]; do
          echo "Aún no tiene IP, esperando 10 segundos..."
          sleep 10
        done

    - name: Habilitar puerto 1883 a Load Balancer
      run: |   
        if ! kubectl get svc ingress-nginx-controller -n ingress-nginx -o json | grep -q '"port": 1883'; then
          echo "Agregando puerto 1883..."
          kubectl patch svc ingress-nginx-controller -n ingress-nginx --type='json' \
            -p '[{"op": "add", "path": "/spec/ports/-", "value": {"name": "mqtt", "port": 1883, "targetPort": 1883, "protocol": "TCP", "nodePort": 32315}}]'
        else
          echo "El puerto 1883 ya está configurado, omitiendo..."
        fi

    - name: Habilitar puerto 8883 a Load Balancer
      run: |
        if ! kubectl get svc ingress-nginx-controller -n ingress-nginx -o json | grep -q '"port": 8883'; then
          echo "Agregando puerto 8883..."
          kubectl patch svc ingress-nginx-controller -n ingress-nginx --type='json' \
            -p '[{"op": "add", "path": "/spec/ports/-", "value": {"name": "mqtts", "port": 8883, "targetPort": 8883, "protocol": "TCP", "nodePort": 31284}}]'
        else
          echo "El puerto 8883 ya está configurado, omitiendo..."
        fi

    - name: Instalar ArgoCD
      run: |
        STATUS=$(helm list -n argocd --filter '^argocd$' -o json | jq -r '.[0].status // empty')
        if [ -z "$STATUS" ] || [ "$STATUS" == "failed" ]; then
          echo "Instalando/Reinstalando ArgoCD..."
          helm uninstall argocd -n argocd || true
          helm repo add argo https://argoproj.github.io/argo-helm
          helm repo update
          helm upgrade --install argocd argo/argo-cd -n argocd --create-namespace --wait -f argocd/values-custom.yaml --debug
        else
          echo "ArgoCD ya esta intalado y funcionando, omitiendo ..."
        fi
      

    - name: Wait for ArgoCD to be ready
      run: kubectl wait --for=condition=available --timeout=300s deployment/argocd-server -n argocd

      ################   CONFIGURACIONES    ########################

    - name: Configuracion tls CloudFlare
      run: |
        kubectl delete secret cloudflare-tls -n ${{ vars.K8S_NAMESPACE }} --ignore-not-found
        kubectl create secret tls cloudflare-tls -n ${{ vars.K8S_NAMESPACE }} \
          --cert=<(echo "${{ secrets.TLS_CERT }}") \
          --key=<(echo "${{ secrets.TLS_KEY }}")

    - name: Configuracion tls data
      run: |
        echo "${{ secrets.EMQX_CA_PEM }}" > ca.pem
        echo "${{ secrets.EMQX_CERT_KEY }}" > emqx.key
        echo "${{ secrets.EMQX_CERT_PEM }}" > emqx.pem
        kubectl delete secret emqx-tls-secret -n ${{ vars.K8S_NAMESPACE }} --ignore-not-found
        kubectl create secret generic emqx-tls-secret -n ${{ vars.K8S_NAMESPACE }} \
          --from-file=ca.pem \
          --from-file=emqx.key \
          --from-file=emqx.pem
      
    - name: Configuracion de repositorios
      run: |
        sed -i "s|\${REPO_TOKEN}|${{ secrets.GH_TOKEN }}|g" repository/repo-manifest.yaml
        kubectl apply -f repository/repo-manifest.yaml
        sleep 5
      working-directory: argocd

    - name: Configuracion de proyecto
      run: kubectl apply -f projects/dash-iot.yaml
      working-directory: argocd

    - name: Crear permisos de GitHub
      run: kubectl get secret ghcr-login-secret -n ${{ vars.K8S_NAMESPACE }} || kubectl create secret docker-registry ghcr-login-secret -n ${{ vars.K8S_NAMESPACE }} --docker-server=https://ghcr.io --docker-username=${{ github.actor }} --docker-password=${{ secrets.GH_TOKEN }}


    - name: Despliegues de aplicaciones
      run: kubectl apply -f applications/.
      working-directory: argocd

    - name: ArgoCD Endpoint
      run: |
        echo "Retrieving ArgoCD external IP and NodePort..."
        EXTERNAL_IP=$(kubectl get nodes -o jsonpath='{.items[0].status.addresses[?(@.type=="ExternalIP")].address}')
        NODEPORT=$(kubectl get svc argocd-server -n argocd -o jsonpath='{.spec.ports[?(@.port==443)].nodePort}')
        echo "EXTERNAL_IP=$EXTERNAL_IP" >> $GITHUB_ENV
        echo "NODEPORT=$NODEPORT" >> $GITHUB_ENV
    
    - name: ------------- MENSAJE --------------
      run: echo "ArgoCD = https://${{ env.EXTERNAL_IP }}:${{ env.NODEPORT }}"
 
    
  